# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2017-12-18 09:33
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


def assign_random_ids(model):
    for i, row in enumerate(model.objects.all()):
        row.id = i
        row.address_temp = row.address
        row.save()


def populate_primary_key(apps, schema_editor):
    Agent = apps.get_model('openbach_django', 'Agent')
    Collector = apps.get_model('openbach_django', 'Collector')
    JobInstance = apps.get_model('openbach_django', 'JobInstance')
    InstalledJobCommandResult = apps.get_model('openbach_django', 'InstalledJobCommandResult')

    for i, collector in enumerate(Collector.objects.all(), 1):
        collector.id = i
        collector.address_temp = collector.address
        collector.save()

    for i, agent in enumerate(Agent.objects.all().select_related('collector'), 1):
        agent.id = i
        agent.address_temp = agent.address
        agent.collector_id_temp = agent.collector.id
        agent.save()

    for job_instance in JobInstance.objects.all().select_related('collector'):
        job_instance.collector_id_temp = job_instance.collector.id
        job_instance.save()

    for klass in ('Entity', 'InstalledJob'):
        model = apps.get_model('openbach_django', klass)
        for row in model.objects.all().select_related('agent'):
            if row.agent is not None:
                row.agent_id_temp = row.agent.id
                row.save()

    for klass in ('AgentCommandResult', 'CollectorCommandResult', 'FileCommandResult'):
        model = apps.get_model('openbach_django', klass)
        for row in model.objects.all():
            row.address_temp = row.address
            row.save()

    for row in InstalledJobCommandResult.objects.all():
        row.address_temp = row.agent_ip
        row.save()


def remove_primary_key(apps, schema_editor):
    Agent = apps.get_model('openbach_django', 'Agent')
    Collector = apps.get_model('openbach_django', 'Collector')
    JobInstance = apps.get_model('openbach_django', 'JobInstance')
    InstalledJobCommandResult = apps.get_model('openbach_django', 'InstalledJobCommandResult')

    for klass in ('Collector', 'AgentCommandResult', 'CollectorCommandResult', 'FileCommandResult'):
        model = apps.get_model('openbach_django', klass)
        for row in model.objects.all():
            row.address = row.address_temp
            row.save()

    for agent in Agent.objects.all():
        agent.address = agent.address_temp
        collector_id = agent.collector_id_temp
        if collector_id:
            agent.collector = Collector.objects.get(id=collector_id)
        agent.save()

    for job_instance in JobInstance.objects.all():
        collector_id = job_instance.collector_id_temp
        if collector_id:
            job_instance.collector = Collector.objects.get(id=collector_id)
            job_instance.save()

    for klass in ('Entity', 'InstalledJob'):
        model = apps.get_model('openbach_django', klass)
        for row in model.objects.all():
            agent_id = row.agent_id_temp
            if agent_id:
                row.agent = Agent.objects.get(id=agent_id)
                row.save()

    for row in InstalledJobCommandResult.objects.all():
        row.agent_ip = row.address_temp
        row.save()


def link_agents_to_jobs(apps, schema_editor):
    Agent = apps.get_model('openbach_django', 'Agent')
    JobInstance = apps.get_model('openbach_django', 'JobInstance')

    for job_instance in JobInstance.objects.all():
        try:
            agent = Agent.objects.get(address=job_instance.agent_address)
        except Agent.DoesNotExist:
            pass
        else:
            job_instance.agent = agent
            job_instance.save()


def link_agents_addresses_to_jobs(apps, schema_editor):
    JobInstance = apps.get_model('openbach_django', 'JobInstance')

    for job_instance in JobInstance.objects.all():
        agent = job_instance.agent
        if agent is None:
            job_instance.agent_address = job_instance.agent_name
        else:
            job_instance.agent_address = agent.address
        job_instance.save()


class Migration(migrations.Migration):

    dependencies = [
        ('openbach_django', '0020_change_log_severity_of_agents'),
    ]

    operations = [
        migrations.RunSQL(
            'SET CONSTRAINTS ALL IMMEDIATE',
            reverse_sql=migrations.RunSQL.noop,
        ),

        migrations.AlterField(
            model_name='agent',
            name='name',
            field=models.CharField(db_index=True, max_length=500, unique=True),
        ),

        migrations.AddField(
            model_name='agent',
            name='id',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='collector',
            name='id',
            field=models.IntegerField(null=True),
        ),

        migrations.AddField(
            model_name='agent',
            name='collector_id_temp',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='jobinstance',
            name='collector_id_temp',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='entity',
            name='agent_id_temp',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='installedjob',
            name='agent_id_temp',
            field=models.IntegerField(null=True),
        ),

        migrations.AddField(
            model_name='agent',
            name='address_temp',
            field=models.CharField(db_index=True, max_length=500, unique=True, null=True),
        ),
        migrations.AddField(
            model_name='collector',
            name='address_temp',
            field=models.CharField(db_index=True, max_length=500, unique=True, null=True),
        ),
        migrations.AddField(
            model_name='agentcommandresult',
            name='address_temp',
            field=models.CharField(max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='collectorcommandresult',
            name='address_temp',
            field=models.CharField(max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='filecommandresult',
            name='address_temp',
            field=models.CharField(max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='installedjobcommandresult',
            name='address_temp',
            field=models.CharField(max_length=500, null=True),
        ),

        migrations.RunPython(
            populate_primary_key,
            reverse_code=remove_primary_key,
        ),

        migrations.RemoveField(
            model_name='installedjob',
            name='agent',
        ),
        migrations.RenameField(
            model_name='installedjob',
            old_name='agent_id_temp',
            new_name='agent',
        ),
        migrations.RemoveField(
            model_name='entity',
            name='agent',
        ),
        migrations.RenameField(
            model_name='entity',
            old_name='agent_id_temp',
            new_name='agent',
        ),

        migrations.AlterField(
            model_name='agent',
            name='address_temp',
            field=models.CharField(db_index=True, max_length=500, unique=True),
        ),
        migrations.RemoveField(
            model_name='agent',
            name='address',
        ),
        migrations.AlterField(
            model_name='agent',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.RenameField(
            model_name='agent',
            old_name='address_temp',
            new_name='address',
        ),

        migrations.RemoveField(
            model_name='jobinstance',
            name='collector',
        ),
        migrations.RenameField(
            model_name='jobinstance',
            old_name='collector_id_temp',
            new_name='collector',
        ),
        migrations.RemoveField(
            model_name='agent',
            name='collector',
        ),
        migrations.RenameField(
            model_name='agent',
            old_name='collector_id_temp',
            new_name='collector',
        ),
        migrations.AlterField(
            model_name='installedjob',
            name='agent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installed_jobs', to='openbach_django.Agent'),
        ),
        migrations.AlterField(
            model_name='entity',
            name='agent',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entity', to='openbach_django.Agent'),
        ),

        migrations.AlterField(
            model_name='collector',
            name='address_temp',
            field=models.CharField(db_index=True, max_length=500, unique=True),
        ),
        migrations.RemoveField(
            model_name='collector',
            name='address',
        ),
        migrations.AlterField(
            model_name='collector',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.RenameField(
            model_name='collector',
            old_name='address_temp',
            new_name='address',
        ),
        migrations.AlterField(
            model_name='agent',
            name='collector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='openbach_django.Collector'),
        ),
        migrations.AlterField(
            model_name='jobinstance',
            name='collector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='openbach_django.Collector'),
        ),

        migrations.AddField(
            model_name='jobinstance',
            name='agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='openbach_django.Agent'),
        ),
        migrations.RunPython(
            link_agents_to_jobs,
            reverse_code=link_agents_addresses_to_jobs,
        ),
        migrations.RemoveField(
            model_name='jobinstance',
            name='agent_address',
        ),

        migrations.RemoveField(
            model_name='agentcommandresult',
            name='address',
        ),
        migrations.AlterField(
            model_name='agentcommandresult',
            name='address_temp',
            field=models.CharField(max_length=500, primary_key=True, serialize=False),
        ),
        migrations.RenameField(
            model_name='agentcommandresult',
            old_name='address_temp',
            new_name='address',
        ),

        migrations.RemoveField(
            model_name='collectorcommandresult',
            name='address',
        ),
        migrations.AlterField(
            model_name='collectorcommandresult',
            name='address_temp',
            field=models.CharField(max_length=500, primary_key=True, serialize=False),
        ),
        migrations.RenameField(
            model_name='collectorcommandresult',
            old_name='address_temp',
            new_name='address',
        ),

        migrations.RemoveField(
            model_name='filecommandresult',
            name='address',
        ),
        migrations.AlterField(
            model_name='filecommandresult',
            name='address_temp',
            field=models.CharField(max_length=500),
        ),
        migrations.RenameField(
            model_name='filecommandresult',
            old_name='address_temp',
            new_name='address',
        ),

        migrations.AlterField(
            model_name='installedjobcommandresult',
            name='address_temp',
            field=models.CharField(max_length=500),
        ),
        migrations.RenameField(
            model_name='installedjobcommandresult',
            old_name='address_temp',
            new_name='address',
        ),
        migrations.AlterUniqueTogether(
            name='installedjobcommandresult',
            unique_together=set([('address', 'job_name')]),
        ),
        migrations.RemoveField(
            model_name='installedjobcommandresult',
            name='agent_ip',
        ),

        migrations.RunSQL(
            migrations.RunSQL.noop,
            reverse_sql='SET CONSTRAINTS ALL IMMEDIATE',
        ),
    ]
