# 
#   OpenBACH is a generic testbed able to control/configure multiple
#   network/physical entities (under test) and collect data from them. It is
#   composed of an Auditorium (HMIs), a Controller, a Collector and multiple
#   Agents (one for each network entity that wants to be tested).
#   
#   
#   Copyright Â© 2016 CNES
#   
#   
#   This file is part of the OpenBACH testbed.
#   
#   
#   OpenBACH is a free software : you can redistribute it and/or modify it under the
#   terms of the GNU General Public License as published by the Free Software
#   Foundation, either version 3 of the License, or (at your option) any later
#   version.
#   
#   This program is distributed in the hope that it will be useful, but WITHOUT
#   ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
#   FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#   details.
#   
#   You should have received a copy of the GNU General Public License along with
#   this program. If not, see http://www.gnu.org/licenses/.
#   
#   
#   
#   @file     install_src.yml
#   @brief    Tasks that install the sources
#   @author   Adrien THIBAUD <adrien.thibaud@toulouse.viveris.com>


---

- name: Install pip
  apt: pkg={{item}} state=installed update_cache=false
  with_items:
    - python3-pip
    - python-pip

- name: Install postgresql-server
  apt: pkg=postgresql-server-dev-9.3 state=installed update_cache=false
  when: ansible_distribution_version != "16.04"

- name: Install postgresql-server
  apt: pkg=postgresql-server-dev-9.5 state=installed update_cache=false
  when: ansible_distribution_version == "16.04"

- name: Install postgresql
  apt: pkg=postgresql state=installed update_cache=false

- name: Download Django
  copy: src=../src/controller/django dest=/tmp/

- name: Install Django
  pip: name=django executable=pip3 version={{ django_version }} extra_args='--download-cache /tmp/django/'
  when: ansible_distribution_version != "16.04"

- name: Install Django
  pip: name=django executable=pip3 version={{ django_version }} extra_args='--no-index --find-links=file:///tmp/django/'
  when: ansible_distribution_version == "16.04"

- name: Download psycopg2
  copy: src=../src/controller/psycopg2 dest=/tmp/

- name: Install psycopg2
  pip: name=psycopg2 executable=pip3 version={{ psycopg2_version }} extra_args='--download-cache /tmp/psycopg2/'
  when: ansible_distribution_version != "16.04"

- name: Install psycopg2
  pip: name=psycopg2 executable=pip3 version={{ psycopg2_version }} extra_args='--no-index --find-links=file:///tmp/psycopg2/'
  when: ansible_distribution_version == "16.04"

- name: Install prerequis for psycopg2 (for ansible)
  apt: pkg={{item}} state=installed update_cache=false
  with_items:
    - libpq-dev
    - python-dev

- name: Install psycopg2 for ansible
  pip: name=psycopg2 executable=pip version={{ psycopg2_version }} extra_args='--download-cache /tmp/psycopg2/'
  when: ansible_distribution_version != "16.04"

- name: Install psycopg2 for ansible
  pip: name=psycopg2 executable=pip version={{ psycopg2_version }} extra_args='--no-index --find-links=file:///tmp/psycopg2/'
  when: ansible_distribution_version == "16.04"

- name: Install python3-yaml
  apt: pkg=python3-yaml state=installed update_cache=false

- name: Download parse module
  copy: src=../src/controller/parse dest=/tmp/

- name: Install parse module
  pip: name=parse executable=pip3 version={{ parse_version }} extra_args='--download-cache /tmp/parse/'
  when: ansible_distribution_version != "16.04"

- name: Install parse module
  pip: name=parse executable=pip3 version={{ parse_version }} extra_args='--no-index --find-links=file:///tmp/parse/'
  when: ansible_distribution_version == "16.04"

- name: Download APScheduler
  copy: src=../src/controller/apscheduler dest=/tmp/

- name: Install APScheduler
  pip: name=apscheduler executable=pip3 version={{ apscheduler_version }} extra_args='--download-cache /tmp/apscheduler/'
  when: ansible_distribution_version != "16.04"

- name: Install APScheduler
  pip: name=apscheduler executable=pip3 version={{ apscheduler_version }} extra_args='--no-index --find-links=file:///tmp/apscheduler/'
  when: ansible_distribution_version == "16.04"

- name: Download uWSGI
  copy: src=../src/controller/uwsgi dest=/tmp/

- name: Install uWSGI
  pip: name=uwsgi executable=pip3 version={{ uwsgi_version }} extra_args='--download-cache /tmp/uwsgi/'
  when: ansible_distribution_version != "16.04"

- name: Install uWSGI
  pip: name=uwsgi executable=pip3 version={{ uwsgi_version }} extra_args='--no-index --find-links=file:///tmp/uwsgi/'
  when: ansible_distribution_version == "16.04"

- name: Copy the global variables file
  copy: src=../configs dest=/opt/openbach-controller/

- name: Install the backend
  copy: src=../src/controller/backend/{{ item.name }} dest=/opt/openbach-controller/backend/ mode={{ item.mode }}
  with_items:
    - { name: 'backend', mode: '0755' }
    - { name: 'openbach-backend.py', mode: '0755' }
    - { name: 'openbach_django', mode: '0755' }

- name: Create a secret key
  shell: echo "from django.utils.crypto import get_random_string; chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'; print(get_random_string(50, chars))" | python3
  register: key

- name: Create a password
  shell: echo "from django.utils.crypto import get_random_string; chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'; print(get_random_string(10, chars))" | python3
  register: password

- name: Set up settings
  template: src=settings.py.j2 dest=/opt/openbach-controller/backend/backend/settings.py

- name: Set up local settings
  template: src=local_settings.py.j2 dest=/opt/openbach-controller/backend/backend/local_settings.py

- name: Install the status-manager
  copy: src=../src/controller/status-manager/status-manager.py dest=/opt/openbach-controller/status-manager/ mode=0755

- name: Install the openbach-conductor
  copy: src=../src/controller/openbach-conductor/{{ item.name }} dest=/opt/openbach-controller/openbach-conductor/ mode={{ item.mode }}
  with_items:
    - { name: 'openbach-conductor.py', mode: '0755' }
    - { name: 'add_job.yml', mode: '0644' }
    - { name: 'del_job.yml', mode: '0644' }
    - { name: 'start_job_instance_agent.yml', mode: '0644' }
    - { name: 'stop_job_instance_agent.yml', mode: '0644' }
    - { name: 'restart_job_instance_agent.yml', mode: '0644' }
    - { name: 'status_job_instance_agent.yml', mode: '0644' }

- name: Packs Rstats client sources
  local_action: command tar -cvzf src/agent/rstats/client_api.tar.gz src/agent/rstats/client_api/
  become: no

- name: Create the repository for the src of the Agents
  file: path=/opt/openbach-controller/src_agent state=directory

- name: Copy the src of the Agents
  copy: src=../src/agent/{{ item.src }} dest=/opt/openbach-controller/src_agent/{{ item.dest }}
  with_items:
    - {'src': 'openbach-agent/', 'dest': 'openbach-agent/'}
    - {'src': 'rstats/client_api.tar.gz', 'dest': 'rstats/'}
    - {'src': 'rstats/rstats_api.py', 'dest': 'rstats/'}
    - {'src': 'rstats/rstats.cfg.j2', 'dest': 'rstats/'}
    - {'src': 'rstats/rstats.py', 'dest': 'rstats/'}
    - {'src': 'rstats/rstats_service', 'dest': 'rstats/'}
    - {'src': 'rstats/rstats.service', 'dest': 'rstats/'}

- name: Copy the installation of the Agents
  copy: src=../src/controller/install_agent dest=/opt/openbach-controller/

- name: Copy the src of the Collectors
  copy: src=../src/collector/ dest=/opt/openbach-controller/src_collector

- name: Copy the installation of the Collectors
  copy: src=../src/controller/install_collector dest=/opt/openbach-controller/

- name: Copy the src of APScheduler
  copy: src=../src/controller/apscheduler dest=/opt/openbach-controller/src_agent

- name: Copy the src of the Jobs
  copy: src=../src/jobs dest=/opt/openbach-controller

- name: Set the influxdb port to use
  replace: dest=/opt/openbach-controller/{{item}} regexp=':8086/query' replace=':{{ influxdb_port }}/query' backup=yes
  with_items:
    - openbach-conductor/openbach-conductor.py
    - status-manager/status-manager.py

- name: Change postgresql methode to trust for user postgres
  lineinfile: dest=/etc/postgresql/9.3/main/pg_hba.conf regexp='^local[ ]+all[ ]+postgres[ ]+peer' line='local all postgres trust' backup=yes
  when: ansible_distribution_version != "16.04"

- name: Change postgresql methode to trust for user postgres
  lineinfile: dest=/etc/postgresql/9.5/main/pg_hba.conf regexp='^local[ ]+all[ ]+postgres[ ]+peer' line='local all postgres trust' backup=yes
  when: ansible_distribution_version == "16.04"

- name: Restart postgresql
  service: name=postgresql state=restarted

- name: Create the database
  postgresql_db: name=openbach_db state=present

- name: Create an admin user on the database
  postgresql_user: db=openbach_db name=openbach password='{{password.stdout}}' priv=CONNECT

- name: Initialize the database
  shell: /opt/openbach-controller/backend/openbach-backend.py migrate

- name: Create a default superuser on the database
  shell: echo "from django.contrib.auth.models import User; User.objects.create_superuser('openbach', '', 'openbach')" | /opt/openbach-controller/backend/openbach-backend.py shell
  ignore_errors: yes

- name: Create openbach-conductor service
  copy: src=../src/controller/openbach-conductor/openbach-conductor dest=/etc/init.d/ mode=0755
  when: ansible_distribution_version != "16.04"

- name: Create openbach-conductor service
  template: src=../src/controller/openbach-conductor/openbach-conductor.service.j2 dest=/etc/systemd/system/openbach-conductor.service mode=0644
  when: ansible_distribution_version == "16.04"

- name: Start openbach-conductor
  service: name=openbach-conductor state=restarted

- name: Create status-manager service
  copy: src=../src/controller/status-manager/status-manager dest=/etc/init.d/ mode=0755
  when: ansible_distribution_version != "16.04"

- name: Create status-manager service
  copy: src=../src/controller/status-manager/status-manager.service dest=/etc/systemd/system/ mode=0644
  when: ansible_distribution_version == "16.04"

- name: Start status-manager
  service: name=status-manager state=restarted

- name: Create openbach-backend service
  copy: src=../src/controller/backend/openbach-backend dest=/etc/init.d/ mode=0755
  when: ansible_distribution_version != "16.04"

- name: Create openbach-backend service
  copy: src=../src/controller/backend/openbach-backend.service dest=/etc/systemd/system/ mode=0644
  when: ansible_distribution_version == "16.04"

- name: Start openbach-backend
  service: name=openbach-backend state=restarted

